/*
 * Copyright 2018 Greg Methvin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.methvin.sbt

import sbt._
import sbt.Keys.{sourceGenerators, _}
import sbt.io.Using
import sbt.plugins.JvmPlugin

import scala.concurrent.duration._

object TldPlugin extends AutoPlugin {

  override def requires = JvmPlugin

  object autoImport {
    val tldGenerate = taskKey[Seq[File]]("Generate the TLD file")
    val tldRegenAfter = settingKey[Duration]("The duration after which to regenerate the TLD list")
    val tldPackageName = settingKey[String]("The name of the package in which to generate the TLD object")
    val tldObjectName = settingKey[String]("The name of the Scala object containing the TLD list")
    val tldValName = settingKey[String]("The name of the val that should be accessed to get the TLD list")
    val tldSourceUrl = settingKey[URL]("The URL to download containing the TLD list")
  }

  import autoImport._

  override lazy val projectSettings: Seq[Setting[_]] =
    inConfig(Compile)(generatorSettings) ++ defaultSettings

  lazy val defaultSettings: Seq[Setting[_]] = Seq(
    tldRegenAfter := 1.day,
    tldPackageName := "io.methvin.tld",
    tldObjectName := "TLDs",
    tldValName := "get",
    tldSourceUrl := new URL("https://data.iana.org/TLD/tlds-alpha-by-domain.txt")
  )

  lazy val generatorSettings: Seq[Setting[_]] = Seq(
    tldGenerate := generate(
      log = streams.value.log,
      packageName = tldPackageName.value,
      objectName = tldObjectName.value,
      valName = tldValName.value,
      regenAfter = tldRegenAfter.value,
      sourceUrl = tldSourceUrl.value,
      file = (sourceManaged in Compile).value / "tld" / s"${tldObjectName.value}.scala"
    ),
    sourceGenerators += tldGenerate
  )

  private def generate(
    packageName: String,
    objectName: String,
    valName: String,
    regenAfter: Duration,
    sourceUrl: URL,
    file: File,
    log: Logger
  ): Seq[File] = {
    if ((System.currentTimeMillis - file.lastModified).millis > regenAfter) {
      log.info(s"Fetching TLD list from $sourceUrl")
      val tldFileContent = Using.urlInputStream(sourceUrl)(IO.readStream(_))
      val tldLines = tldFileContent.linesIterator
        .map(_.toLowerCase.trim)
        .filter(line => line.nonEmpty && line.forall(c => c.isLetterOrDigit || c == '-'))
        .toIndexedSeq
        .sorted
      val content =
        s"""/*
           | * GENERATED by sbt-tld
           | */
           |package $packageName
           |
           |object `$objectName` {
           |  val `$valName`: IndexedSeq[String] = ${tldLines.mkString("IndexedSeq(\n\"", "\",\n\"", "\"\n)")}
           |}
        """.stripMargin
      IO.write(file, content)
      log.info(s"Generated TLD file: $file")
    }
    Seq(file)
  }

}
